import type { BotContext } from '@/type/context.type';
import type { CallbackQueryMiddleware } from 'grammy';

import { env } from '@/lib/env';
import { logger } from '@/lib/logger';

const escapeMarkdown = (text: string) => {
  return text.replace(/[_*[\]()~`>#+=|{}.!-]/g, '\\$&');
};

export const securityCallback: CallbackQueryMiddleware<BotContext> = async (ctx) => {
  const action = ctx.callbackQuery.data;

  try {
    let sentMessage;
    let messageText = '';
    const isRevealed = action.endsWith('_reveal') || action === 'security_delete_message';
    const baseAction = isRevealed ? action.replace('_reveal', '') : action;

    if (isRevealed) {
      switch (baseAction) {
        case 'security_google':
          messageText = `üìß –ü–æ—á—Ç–∞: \`\`\`${escapeMarkdown(env.GOOGLE_MAIL)}\`\`\`\nüîë –ü–∞—Ä–æ–ª—å: \`\`\`${escapeMarkdown(env.GOOGLE_PASSWORD)}\`\`\``;
          break;
        case 'security_work_google':
          messageText = `üìß –ü–æ—á—Ç–∞: \`\`\`${escapeMarkdown(env.GOOGLE_MAIL_WORK)}\`\`\`\nüîë –ü–∞—Ä–æ–ª—å: \`\`\`${escapeMarkdown(env.GOOGLE_PASSWORD_WORK)}\`\`\``;
          break;
        case 'security_yandex_main':
          messageText = `üìß –ü–æ—á—Ç–∞: \`\`\`${escapeMarkdown(env.YANDEX_MAIL_MAIN)}\`\`\`\nüîë –ü–∞—Ä–æ–ª—å: \`\`\`${escapeMarkdown(env.YANDEX_PASSWORD_MAIN)}\`\`\``;
          break;
        case 'security_yandex_secondary':
          messageText = `üìß –ü–æ—á—Ç–∞: \`\`\`${escapeMarkdown(env.YANDEX_MAIL_SECOND)}\`\`\`\nüîë –ü–∞—Ä–æ–ª—å: \`\`\`${escapeMarkdown(env.YANDEX_PASSWORD_SECOND)}\`\`\``;
          break;
        case 'security_yandex_third':
          messageText = `üìß –ü–æ—á—Ç–∞: \`\`\`${escapeMarkdown(env.YANDEX_MAIL_THIRD)}\`\`\`\nüîë –ü–∞—Ä–æ–ª—å: \`\`\`${escapeMarkdown(env.YANDEX_PASSWORD_THIRD)}\`\`\``;
          break;
        case 'security_work_yandex':
          messageText = `üìß –ü–æ—á—Ç–∞: \`\`\`${escapeMarkdown(env.YANDEX_MAIL_WORK)}\`\`\`\nüîë –ü–∞—Ä–æ–ª—å: \`\`\`${escapeMarkdown(env.YANDEX_PASSWORD_WORK)}\`\`\``;
          break;
        case 'security_steam':
          messageText = `üë®‚Äçü¶≥ –ò–º—è: \`\`\`${escapeMarkdown(env.STEAM_NAME)}\`\`\`\nüîë –ü–∞—Ä–æ–ª—å: \`\`\`${escapeMarkdown(env.STEAM_PASSWORD)}\`\`\``;
          break;
        case 'security_npm':
          messageText = `üë®‚Äçüíª –ò–º—è: \`\`\`${escapeMarkdown(env.NPM_USERNAME)}\`\`\`\nüîë –ü–∞—Ä–æ–ª—å: \`\`\`${escapeMarkdown(env.NPM_PASSWORD)}\`\`\``;
          break;
        case 'security_github':
          messageText = `üë®‚Äçüíª –ò–º—è: \`\`\`${escapeMarkdown(env.GITHUB_USERNAME)}\`\`\`\nüîë –ü–∞—Ä–æ–ª—å: \`\`\`${escapeMarkdown(env.GITHUB_PASSWORD)}\`\`\``;
          break;
        case 'security_vpn':
          messageText = `üîë VLESS: \`\`\`${escapeMarkdown(env.VPN_VLESS)}\`\`\``;
          break;
        case 'security_delete_message':
          await ctx.editMessageText('–£–¥–∞–ª–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ');
          await ctx.answerCallbackQuery();
          return;
      }
    } else {
      messageText = 'üîí –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–∫—Ä—ã—Ç—å¬ª, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ';
    }

    if (messageText) {
      const keyboard = isRevealed
        ? [[{ text: '‚úÇÔ∏è –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ', callback_data: 'security_delete_message' }]]
        : [[{ text: 'üîì –û—Ç–∫—Ä—ã—Ç—å', callback_data: `${action}_reveal` }]];

      sentMessage = await ctx.editMessageText(messageText, {
        parse_mode: 'MarkdownV2',
        reply_markup: {
          inline_keyboard: keyboard
        }
      });
    }

    await ctx.answerCallbackQuery();

    if (sentMessage && isRevealed) {
      setTimeout(() => {
        void (async () => {
          try {
            await ctx.api.editMessageText(
              ctx.chat!.id,
              sentMessage.message_id,
              '–£–¥–∞–ª–µ–Ω–æ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é 5 –º–∏–Ω—É—Ç'
            );
          } catch (error) {
            logger.error('Error replacing message:', error);
          }
        })();
      }, env.DELETION_DELAY);
    }
  } catch (error) {
    await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
    logger.error('Security callback error:', error);
  }
};
